--environment
	classname=environment.WaypointEnvironment,
	distance=20,
	random=0.4,
	width=75,
	safetydistance=2,
	height=75,
	steps=500,
	otherrobots=20
--postevaluation
	samples=100
--executor
	classname=taskexecutor.ConillonTaskExecutor
--evaluation
	classname=evaluation.WaypointFitness,
	kill=1,
	targetdistance=2,
	safetydistance=2
--random-seed
	1
--controllers
	classname=controllers.DroneNeuralNetworkController,
	network=(
		classname=commoninterface.neuralnetwork.CINEATNetwork,
		inputs=(
			Waypoint=(
				classname=commoninterface.neuralnetwork.inputs.WaypointCINNInput,
				id=1
			),
			Drone=(
				classname=commoninterface.neuralnetwork.inputs.GenericCINNInput,
				id=2
			)
		),
		outputs=(
			Rudder=(
				classname=commoninterface.neuralnetwork.outputs.RudderCINNOutput,
				forwardonly=1,
				id=1
			)
		)
	)
--simulator
	network=(
		classname=network.SimulationNetwork
	)
--evolution
	classname=evolutionaryrobotics.evolution.NEATEvolution
--robots
	numberofrobots=1,
	variablenumber=0,
	randomizenumber=1,
	sensors=(
		CISensorWrapper_1=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.WaypointCISensor,
				id=1,
				range=10
			),
			id=1
		),
		CISensorWrapper_2=(
			classname=simulation.robot.CISensorWrapper,
			ci=(
				classname=commoninterface.sensors.DroneCISensor,
				id=2,
				range=10,
				numbersensors=4
			),
			id=2
		)
	),
	classname=simulation.robot.AquaticDrone,
	gpserror=1.0,
	compasserror=10,
	rudder=1,
	distancewheels=0.2,
	radius=0.5,
	diameter=1,
	maxspeed=0.3,
	commrange=40,
	avoiddrones=0
--updatables
	currents=(
		classname=updatables.WaterCurrent,
		maxspeed=0.1
	)
--output
	rudder/waypoint/1
--population load=rudder/waypoint/1/populations/population249
--random-seed -1961000002
